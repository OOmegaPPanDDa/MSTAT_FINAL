hitting_data = read_csv(hitting_path)
fielding_data = read_csv(fielding_path)
pitching_data = read_csv(pitching_path)
# handle salary_data
position = salary_data[seq(from = 2, to = nrow(salary_data), by = 2),][2]
names(position) = c('POSITION')
salary_data = salary_data[seq(from = 1, to = nrow(salary_data), by = 2),]
salary_data = cbind(salary_data, position)
salary_data$SALARY = gsub('\xa0','',(salary_data$SALARY))
salary_data$SALARY = gsub("\\$",'',(salary_data$SALARY))
salary_data$SALARY = gsub(',','',(salary_data$SALARY))
salary_data$SALARY = as.numeric(salary_data$SALARY)
salary_data$Player = sapply(salary_data$PLAYER, function(x) paste0(tail(strsplit(x,' ')[[1]],1),', ', substr(x,1,1)))
salary_data$Player = sapply(salary_data$Player, function(x) paste0(toupper(substr(x, 1, 1)), substr(x, 2, nchar(x))))
salary_data$Pos = sapply(salary_data$POSITION, function(x) pos_transfer(x))
names(salary_data) = c('Team', 'Player_Full_Name', 'Salary', 'Pos1_Detailed', 'Player', 'Pos1')
salary_data = salary_data[,c('Player', 'Player_Full_Name', 'Team', 'Pos1', 'Pos1_Detailed', 'Salary')]
salary_data <- salary_data %>%
arrange(Player) %>%
arrange(desc(Salary))
# handle mlb data
mlb_key_col = c('Player','Team')
fielding_data <- fielding_data[,-which(names(fielding_data) %in% c('RK'))]
pitching_data <- pitching_data[,-which(names(pitching_data) %in% c('RK'))]
names(hitting_data) = paste('h_', names(hitting_data), sep='')
names(fielding_data) = paste('f_', names(fielding_data), sep='')
names(pitching_data) = paste('p_', names(pitching_data), sep='')
names(hitting_data)[1:2] = mlb_key_col
names(fielding_data)[1:2] = mlb_key_col
names(pitching_data)[1:2] = mlb_key_col
mlb_data <- merge(x = hitting_data, y = fielding_data, all=TRUE, by = mlb_key_col)
mlb_data <- merge(x = mlb_data, y = pitching_data, all=TRUE, by = mlb_key_col)
names(mlb_data) = gsub('¡¿','',names(mlb_data))
mlb_pos = c()
for (i in 1:nrow(mlb_data)){
if(!is.na(mlb_data[,c('h_Pos')][i])){
mlb_pos[i] = mlb_data[,c('h_Pos')][i]
}else{
mlb_pos[i] = mlb_data[,c('f_Pos')][i]
}
}
mlb_data <- mlb_data[,-which(names(mlb_data) %in% c('h_Pos','f_Pos'))]
mlb_data$Pos = mlb_pos
c(1)+c(2)
c(1)+c(2,3)
c(1,1)+c(2,2,3)
c('1','1')+c('2','2','3')
do.call("rbind", list(mlb_data[,c('Player','Team')],mlb_data[,c('Pos')],mlb_data[,-c('Player','Team','Pos')])
)
mlb_data = do.call("rbind", list(mlb_data[,c('Player','Team')],mlb_data[,c('Pos')],mlb_data[,-which(names(mlb_data) %in%c('Player','Team','Pos')]))
do.call("rbind", list(mlb_data[,c('Player','Team')],mlb_data[,c('Pos')],mlb_data[,-which(names(mlb_data) %in%c('Player','Team','Pos'))]))
do.call("cbind", list(mlb_data[,c('Player','Team')],mlb_data[,c('Pos')],mlb_data[,-which(names(mlb_data) %in%c('Player','Team','Pos'))]))
library(readr)
library(dplyr)
pos_transfer <- function(x){
if(grepl('PITCHERS',x) || grepl('STARTING PITCHER',x) || grepl('RELIEF PITCHER',x) || grepl('CLOSER',x)){
return('P')
}
if(grepl('CATCHER', x)){
return('C')
}
if(grepl('1ST BASE', x)){
return('1B')
}
if(grepl('2ND BASE', x)){
return('2B')
}
if(grepl('3RD BASE', x)){
return('3B')
}
if(grepl('3RD BASE', x)){
return('3B')
}
if(grepl('LEFT FIELD', x)){
return('LF')
}
if(grepl('RIGHT FIELD', x)){
return('RF')
}
if(grepl('CENTER FIELD', x)){
return('CF')
}
if(grepl('SHORTSTOP', x)){
return('SS')
}
if(grepl('DESIGNATED HITTER', x)){
return('DH')
}
if(grepl('OUTFIELDERS', x)){
return(NA)
}
cat('out_of_pos_transfer: ', x, '\n')
return(NA)
}
# load data
year = 2013
salary_path = paste0('./salary_data/salary_', year, '_valid.csv')
hitting_path = paste0('./hitting_data/data_', year, '_hitting_valid.csv')
fielding_path = paste0('./fielding_data/data_', year, '_fielding_valid.csv')
pitching_path = paste0('./pitching_data/data_', year, '_pitching_valid.csv')
salary_data = read_csv(salary_path)
hitting_data = read_csv(hitting_path)
fielding_data = read_csv(fielding_path)
pitching_data = read_csv(pitching_path)
# handle salary_data
position = salary_data[seq(from = 2, to = nrow(salary_data), by = 2),][2]
names(position) = c('POSITION')
salary_data = salary_data[seq(from = 1, to = nrow(salary_data), by = 2),]
salary_data = cbind(salary_data, position)
salary_data$SALARY = gsub('\xa0','',(salary_data$SALARY))
salary_data$SALARY = gsub("\\$",'',(salary_data$SALARY))
salary_data$SALARY = gsub(',','',(salary_data$SALARY))
salary_data$SALARY = as.numeric(salary_data$SALARY)
salary_data$Player = sapply(salary_data$PLAYER, function(x) paste0(tail(strsplit(x,' ')[[1]],1),', ', substr(x,1,1)))
salary_data$Player = sapply(salary_data$Player, function(x) paste0(toupper(substr(x, 1, 1)), substr(x, 2, nchar(x))))
salary_data$Pos = sapply(salary_data$POSITION, function(x) pos_transfer(x))
names(salary_data) = c('Team', 'Player_Full_Name', 'Salary', 'Pos1_Detailed', 'Player', 'Pos1')
salary_data = salary_data[,c('Player', 'Player_Full_Name', 'Team', 'Pos1', 'Pos1_Detailed', 'Salary')]
salary_data <- salary_data %>%
arrange(Player) %>%
arrange(desc(Salary))
# handle mlb data
mlb_key_col = c('Player','Team')
fielding_data <- fielding_data[,-which(names(fielding_data) %in% c('RK'))]
pitching_data <- pitching_data[,-which(names(pitching_data) %in% c('RK'))]
names(hitting_data) = paste('h_', names(hitting_data), sep='')
names(fielding_data) = paste('f_', names(fielding_data), sep='')
names(pitching_data) = paste('p_', names(pitching_data), sep='')
names(hitting_data)[1:2] = mlb_key_col
names(fielding_data)[1:2] = mlb_key_col
names(pitching_data)[1:2] = mlb_key_col
mlb_data <- merge(x = hitting_data, y = fielding_data, all=TRUE, by = mlb_key_col)
mlb_data <- merge(x = mlb_data, y = pitching_data, all=TRUE, by = mlb_key_col)
names(mlb_data) = gsub('¡¿','',names(mlb_data))
mlb_pos = c()
for (i in 1:nrow(mlb_data)){
if(!is.na(mlb_data[,c('h_Pos')][i])){
mlb_pos[i] = mlb_data[,c('h_Pos')][i]
}else{
mlb_pos[i] = mlb_data[,c('f_Pos')][i]
}
}
mlb_data <- mlb_data[,-which(names(mlb_data) %in% c('h_Pos','f_Pos'))]
mlb_data$Pos = mlb_pos
mlb_data = do.call("cbind", list(mlb_data[,c('Player','Team')],mlb_data[,c('Pos')],mlb_data[,-which(names(mlb_data) %in%c('Player','Team','Pos'))]))
source('~/.active-rstudio-document')
data <- merge(x = mlb_data, y = salary_data, by = c('Player', 'Team'))
View(data)
names(data)
data_name = names(data)[4:ncol(data_name)-4]
data_name = names(data)[4:ncol(data)-4]
data_name
names(data)[seq(from=4,to=ncol(data)-4)]
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(duplicated_data)
library(readr)
library(dplyr)
pos_transfer <- function(x){
if(grepl('PITCHERS',x) || grepl('STARTING PITCHER',x) || grepl('RELIEF PITCHER',x) || grepl('CLOSER',x)){
return('P')
}
if(grepl('CATCHER', x)){
return('C')
}
if(grepl('1ST BASE', x)){
return('1B')
}
if(grepl('2ND BASE', x)){
return('2B')
}
if(grepl('3RD BASE', x)){
return('3B')
}
if(grepl('3RD BASE', x)){
return('3B')
}
if(grepl('LEFT FIELD', x)){
return('LF')
}
if(grepl('RIGHT FIELD', x)){
return('RF')
}
if(grepl('CENTER FIELD', x)){
return('CF')
}
if(grepl('SHORTSTOP', x)){
return('SS')
}
if(grepl('DESIGNATED HITTER', x)){
return('DH')
}
if(grepl('OUTFIELDERS', x)){
return(NA)
}
cat('out_of_pos_transfer: ', x, '\n')
return(NA)
}
# load data
year = 2013
salary_path = paste0('./salary_data/salary_', year, '_valid.csv')
hitting_path = paste0('./hitting_data/data_', year, '_hitting_valid.csv')
fielding_path = paste0('./fielding_data/data_', year, '_fielding_valid.csv')
pitching_path = paste0('./pitching_data/data_', year, '_pitching_valid.csv')
salary_data = read_csv(salary_path)
hitting_data = read_csv(hitting_path)
fielding_data = read_csv(fielding_path)
pitching_data = read_csv(pitching_path)
# handle salary_data
position = salary_data[seq(from = 2, to = nrow(salary_data), by = 2),][2]
names(position) = c('POSITION')
salary_data = salary_data[seq(from = 1, to = nrow(salary_data), by = 2),]
salary_data = cbind(salary_data, position)
salary_data$SALARY = gsub('\xa0','',(salary_data$SALARY))
salary_data$SALARY = gsub("\\$",'',(salary_data$SALARY))
salary_data$SALARY = gsub(',','',(salary_data$SALARY))
salary_data$SALARY = as.numeric(salary_data$SALARY)
salary_data$Player = sapply(salary_data$PLAYER, function(x) paste0(tail(strsplit(x,' ')[[1]],1),', ', substr(x,1,1)))
salary_data$Player = sapply(salary_data$Player, function(x) paste0(toupper(substr(x, 1, 1)), substr(x, 2, nchar(x))))
salary_data$Pos = sapply(salary_data$POSITION, function(x) pos_transfer(x))
names(salary_data) = c('Team', 'Player_Full_Name', 'Salary', 'Pos1_Detailed', 'Player', 'Pos1')
salary_data = salary_data[,c('Player', 'Player_Full_Name', 'Team', 'Pos1', 'Pos1_Detailed', 'Salary')]
salary_data <- salary_data %>%
arrange(Player) %>%
arrange(desc(Salary))
# handle mlb data
mlb_key_col = c('Player','Team')
fielding_data <- fielding_data[,-which(names(fielding_data) %in% c('RK'))]
pitching_data <- pitching_data[,-which(names(pitching_data) %in% c('RK'))]
names(hitting_data) = paste('h_', names(hitting_data), sep='')
names(fielding_data) = paste('f_', names(fielding_data), sep='')
names(pitching_data) = paste('p_', names(pitching_data), sep='')
names(hitting_data)[1:2] = mlb_key_col
names(fielding_data)[1:2] = mlb_key_col
names(pitching_data)[1:2] = mlb_key_col
mlb_data <- merge(x = hitting_data, y = fielding_data, all=TRUE, by = mlb_key_col)
mlb_data <- merge(x = mlb_data, y = pitching_data, all=TRUE, by = mlb_key_col)
names(mlb_data) = gsub('¡¿','',names(mlb_data))
mlb_pos = c()
for (i in 1:nrow(mlb_data)){
if(!is.na(mlb_data[,c('h_Pos')][i])){
mlb_pos[i] = mlb_data[,c('h_Pos')][i]
}else{
mlb_pos[i] = mlb_data[,c('f_Pos')][i]
}
}
mlb_data <- mlb_data[,-which(names(mlb_data) %in% c('h_Pos','f_Pos'))]
mlb_data$Pos = mlb_pos
mlb_data = do.call("cbind", list(mlb_data[,c('Player','Team')],mlb_data[,c('Pos')],mlb_data[,-which(names(mlb_data) %in%c('Player','Team','Pos'))]))
names(mlb_data)[3] = 'Pos2'
mlb_data$Player = sapply(mlb_data$Player, function(x) substr(x, 2, nchar(x)))
mlb_data <- mlb_data %>%
arrange(Player)
# merge data
data <- merge(x = mlb_data, y = salary_data, by = c('Player', 'Team'))
numeric_data_name = names(data)[seq(from=4, to=ncol(data)-4)]
data = data[,c("Player", "Player_Full_Name", "Team", "Pos1_Detailed", "Pos1", "Pos2", numeric_data_name, "Salary")]
data[data=='.---'] = NA
data[data=='-.--'] = NA
data[data=='-'] = NA
data <- data %>%
arrange(Player) %>%
arrange(desc(Salary))
duplicated_data = data[duplicated(data[,c(1,3)]),c(1,3)]
data[,c(1,3)]
duplicated(data[,c(1,3)])
sum(duplicated(data[,c(1,3)]))
source('~/.active-rstudio-document')
name_duplicated_data
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
the_year = 2013
the_year = 2015
rank_stage = 500
year_considered = c(2012,2013,2014,2015,2016)
year_data_list = list()
year_data_list_index = 1
pre_year = the_year - 1
year = the_year
pre_year_path = paste0('./merge_data/merge_data_', pre_year, '.csv')
year_path = paste0('./merge_data/merge_data_', year, '.csv')
pre_year_data = read_csv(pre_year_path)
year_data = read_csv(year_path)
year_data <- year_data %>%
select(Player_Full_Name,Team,Salary)
names(year_data)[ncol(year_data)] = 'Salary_to_predict'
# merge year and pre_year data
# merge by Player_Full_Name
the_data <- merge(x = pre_year_data, y = year_data, by = c('Player_Full_Name')) %>%
arrange(desc(Salary_to_predict))
View(the_data)
the_data <- the_data[,-which(names(the_data) %in% c('Team.y'))]
names(the_data)[3] = 'Team'
# remove duplicated
name_duplicated_data = the_data$Player_Full_Name[duplicated(the_data$Player_Full_Name)]
# print(name_duplicated_data)
the_data <- the_data %>%
filter(!(Player_Full_Name %in% name_duplicated_data))
View(name_duplicated_data)
year_record = rep(the_year, nrow(the_data))
the_data = cbind(year_record, the_data)
the_data <- the_data %>%
mutate(Salary_rank = floor((rank(the_data$Salary, ties.method = 'last')/nrow(the_data))*rank_stage- 0.00001) + 1) %>%
mutate(Salary_to_predict_rank = floor((rank(the_data$Salary_to_predict, ties.method = 'last')/nrow(the_data))*rank_stage- 0.00001) + 1)
View(the_data)
names(the_data)
seq(from=9,to=ncol(the_data)-4)
scale(the_data[seq(from=8,to=ncol(the_data)-4)])
scale(the_data[seq(from=8,to=ncol(the_data)-4)])
names(the_data)[seq(from=8,to=ncol(the_data)-4)]
scale(the_data[seq(from=8,to=ncol(the_data)-4)])
scale(as.numeric(the_data[seq(from=8,to=ncol(the_data)-4)]))
type(the_data[8])
class(the_data[8])
mode(the_data[8])
(the_data[8])
as.numeric(the_data[8])
mode(the_data[8])
mode(the_data[9])
mode(the_data[10])
class(the_data[10])
summary(the_data)
the_data$p_K_BB
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
rank_stage = 500
year_considered = c(2012,2013,2014,2015,2016)
year_data_list = list()
year_data_list_index = 1
the_year = 2014
# load data
pre_year = the_year - 1
year = the_year
pre_year_path = paste0('./merge_data/merge_data_', pre_year, '.csv')
year_path = paste0('./merge_data/merge_data_', year, '.csv')
pre_year_data = read_csv(pre_year_path)
year_data = read_csv(year_path)
year_data <- year_data %>%
select(Player_Full_Name,Team,Salary)
names(year_data)[ncol(year_data)] = 'Salary_to_predict'
# merge year and pre_year data
# merge by Player_Full_Name
the_data <- merge(x = pre_year_data, y = year_data, by = c('Player_Full_Name')) %>%
arrange(desc(Salary_to_predict))
the_data <- the_data[,-which(names(the_data) %in% c('Team.y'))]
names(the_data)[3] = 'Team'
# remove duplicated
name_duplicated_data = the_data$Player_Full_Name[duplicated(the_data$Player_Full_Name)]
# print(name_duplicated_data)
the_data <- the_data %>%
filter(!(Player_Full_Name %in% name_duplicated_data))
year_record = rep(the_year, nrow(the_data))
the_data = cbind(year_record, the_data)
the_data <- the_data %>%
mutate(Salary_rank = floor((rank(the_data$Salary, ties.method = 'last')/nrow(the_data))*rank_stage- 0.00001) + 1) %>%
mutate(Salary_to_predict_rank = floor((rank(the_data$Salary_to_predict, ties.method = 'last')/nrow(the_data))*rank_stage- 0.00001) + 1)
scale(the_data[seq(from=8,to=ncol(the_data)-4)])
source('~/MSTAT/MSTAT_FINAL/test_rf.R')
rank_stage = 500
year_considered = c(2012,2013,2014,2015,2016)
year_data_list = list()
year_data_list_index = 1
the_year = 2012
# load data
pre_year = the_year - 1
year = the_year
pre_year_path = paste0('./merge_data/merge_data_', pre_year, '.csv')
year_path = paste0('./merge_data/merge_data_', year, '.csv')
pre_year_data = read_csv(pre_year_path)
year_data = read_csv(year_path)
year_data <- year_data %>%
select(Player_Full_Name,Team,Salary)
names(year_data)[ncol(year_data)] = 'Salary_to_predict'
# merge year and pre_year data
# merge by Player_Full_Name
the_data <- merge(x = pre_year_data, y = year_data, by = c('Player_Full_Name')) %>%
arrange(desc(Salary_to_predict))
the_data <- the_data[,-which(names(the_data) %in% c('Team.y'))]
names(the_data)[3] = 'Team'
# remove duplicated
name_duplicated_data = the_data$Player_Full_Name[duplicated(the_data$Player_Full_Name)]
# print(name_duplicated_data)
the_data <- the_data %>%
filter(!(Player_Full_Name %in% name_duplicated_data))
year_record = rep(the_year, nrow(the_data))
the_data = cbind(year_record, the_data)
the_data <- the_data %>%
mutate(Salary_rank = floor((rank(the_data$Salary, ties.method = 'last')/nrow(the_data))*rank_stage- 0.00001) + 1) %>%
mutate(Salary_to_predict_rank = floor((rank(the_data$Salary_to_predict, ties.method = 'last')/nrow(the_data))*rank_stage- 0.00001) + 1)
scale(the_data[seq(from=8,to=ncol(the_data)-4)])
summarise(the_data[seq(from=8,to=ncol(the_data)-4)])
summarise(the_data)
View(the_data)
summary(the_data)
the_data$h_SB
source('~/MSTAT/MSTAT_FINAL/merge.R')
View(data)
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
library(readr)
library(dplyr)
library(randomForest)
library(ggplot2)
options(scipen=999)
rank_stage = 500
year_considered = c(2013,2014,2015,2016)
year_data_list = list()
year_data_list_index = 1
for (the_year in year_considered){
# load data
pre_year = the_year - 1
year = the_year
pre_year_path = paste0('./merge_data/merge_data_', pre_year, '.csv')
year_path = paste0('./merge_data/merge_data_', year, '.csv')
pre_year_data = read_csv(pre_year_path)
year_data = read_csv(year_path)
year_data <- year_data %>%
select(Player_Full_Name,Team,Salary)
names(year_data)[ncol(year_data)] = 'Salary_to_predict'
# merge year and pre_year data
# merge by Player_Full_Name
the_data <- merge(x = pre_year_data, y = year_data, by = c('Player_Full_Name')) %>%
arrange(desc(Salary_to_predict))
the_data <- the_data[,-which(names(the_data) %in% c('Team.y'))]
names(the_data)[3] = 'Team'
# remove duplicated
name_duplicated_data = the_data$Player_Full_Name[duplicated(the_data$Player_Full_Name)]
# print(name_duplicated_data)
the_data <- the_data %>%
filter(!(Player_Full_Name %in% name_duplicated_data))
year_record = rep(the_year, nrow(the_data))
the_data = cbind(year_record, the_data)
the_data <- the_data %>%
mutate(Salary_rank = floor((rank(the_data$Salary, ties.method = 'last')/nrow(the_data))*rank_stage- 0.00001) + 1) %>%
mutate(Salary_to_predict_rank = floor((rank(the_data$Salary_to_predict, ties.method = 'last')/nrow(the_data))*rank_stage- 0.00001) + 1)
# scale data
the_data[seq(from=8,to=ncol(the_data)-4)] = scale(the_data[seq(from=8,to=ncol(the_data)-4)])
year_data_list[[year_data_list_index]] = the_data
year_data_list_index = year_data_list_index + 1
}
bdata = do.call("rbind", year_data_list)
bdata <- bdata %>%
mutate(Trend = Salary_to_predict_rank - Salary_rank)
bdata$Trend[bdata$Trend > 0] = 'up'
bdata$Trend[bdata$Trend <= 0] = 'hold&down'
# bdata$Trend[bdata$Trend == 0] = 'hold'
# bdata$Trend[bdata$Trend < 0] = 'down'
# replace NA by -1
bdata[is.na(bdata)] <- -1
View(bdata)
pos_dummy = as.data.frame(model.matrix(~ Pos2 - 1, data = bdata))
View(pos_dummy)
names(pos_dummy) = sapply(names(pos_dummy), function(x) paste0('pos_',substr(x,5,6)))
bdata = cbind(cbind(bdata[,c(1,2,3,4,5,6,7)], pos_dummy), bdata[,seq(from = 8, to = ncol(bdata))])
names(bdata)
source('~/MSTAT/MSTAT_FINAL/test_rf.R')
names(bdata)
source('~/MSTAT/MSTAT_FINAL/test_rf.R')
source('~/MSTAT/MSTAT_FINAL/test_rf.R')
source('~/MSTAT/MSTAT_FINAL/test_rf.R')
source('~/MSTAT/MSTAT_FINAL/test_rf.R')
source('~/MSTAT/MSTAT_FINAL/test_rf.R')
source('~/MSTAT/MSTAT_FINAL/test_rf.R')
source('~/MSTAT/MSTAT_FINAL/test_rf.R')
source('~/MSTAT/MSTAT_FINAL/test_rf.R')
source('~/MSTAT/MSTAT_FINAL/test_rf.R')
source('~/MSTAT/MSTAT_FINAL/test_rf.R')
source('~/MSTAT/MSTAT_FINAL/test_rf.R')
source('~/MSTAT/MSTAT_FINAL/test_rf.R')
source('~/MSTAT/MSTAT_FINAL/test_rf.R')
source('~/MSTAT/MSTAT_FINAL/test_rf.R')
importance(brf)
library(readr)
data_2011_fielding_valid <- read_csv("~/MSTAT/MSTAT_FINAL/fielding_data/data_2011_fielding_valid.csv")
View(data_2011_fielding_valid)
library(readr)
data_2012_fielding_valid <- read_csv("~/MSTAT/MSTAT_FINAL/fielding_data/data_2012_fielding_valid.csv")
View(data_2012_fielding_valid)
library(readr)
data_2011_hitting_valid <- read_csv("~/MSTAT/MSTAT_FINAL/hitting_data/data_2011_hitting_valid.csv")
View(data_2011_hitting_valid)
library(readr)
data_2012_hitting_valid <- read_csv("~/MSTAT/MSTAT_FINAL/hitting_data/data_2012_hitting_valid.csv")
View(data_2012_hitting_valid)
View(data_2011_hitting_valid)
source('~/MSTAT/MSTAT_FINAL/merge.R')
View(data)
source('~/MSTAT/MSTAT_FINAL/test_rf.R')
