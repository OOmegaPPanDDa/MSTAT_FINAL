shiny::runApp('dsR/dsr_zhihu/shiny_dsr_zhihu')
runApp('dsR/dsr_zhihu/shiny_dsr_zhihu')
library(readr)
train <- read_csv("~/Desktop/pecuD3_final/train.csv")
View(train)
unique(train$STOP_NAME)
stop_name<-unique(train$STOP_NAME)
paste(stop_name,'火車站', collapse = '')
paste0(stop_name,'火車站', collapse = '')
stop_df <- data.frame(stop_name = stop_name)
stop_df
stop_df <- stop_df %>% mutate(paste(stop_name,'火車站',collapse=''))
library(dplyr)
stop_df <- stop_df %>% mutate(paste(stop_name,'火車站',collapse=''))
stop_df
View(stop_df)
stop_df <- stop_df %>% mutate(stop_t_name = paste(stop_name,'火車站',collapse=''))
stop_df = stop_df[c(,1)]
stop_df = stop_df[c(1),]
stop_name
stop_df <- data.frame(stop_name = stop_name)
colnames(stop_df)
colnames(stop_df) <- '1'
stop_df <- stop_df %>% mutate(2 = paste(1,'火車站',collapse=''))
stop_df <- stop_df %>% mutate('2' = paste('1','火車站',collapse=''))
colnames(stop_df) = one
colnames(stop_df) = 'one'
stop_df <- stop_df %>% mutate(two = paste(one,'火車站',collapse=''))
stop_df <- stop_df %>% mutate(two = paste(stop_df$one,'火車站',collapse=''))
stop_name
for(name in stop_name){}
stop_name
stop_df <- data.frame(stop_name = stop_name)
for(i in 1:nrow(stop_df)){
stop_df$stop_name[i] = paste(stop_df$stop_name[i],' 火車站',collapse = '')
}
View(stop_df)
stop_df <- data.frame(stop_name = stop_name)
stop_df <- data.frame(sname = stop_name)
for(i in 1:nrow(stop_df)){
stop_df[i,sname] = paste(stop_df[i,sname],' 火車站',collapse = '')
}
for(i in 1:nrow(stop_df)){
stop_df[i,'sname'] = paste(stop_df[i,'sname'],' 火車站',collapse = '')
}
stop_name
to_add<-rep('火車站',length(stop_name))
to_add
paste(stop_name,to_add,collapse = '')
paste0(stop_name,to_add,collapse = '')
paste0(stop_name,to_add)
stop_name<-paste0(stop_name,to_add)
stop_name
write(stop_name,'stop_name.txt')
install.packages(library(googleVis))
install.packages('googleVis')
library(googleVis)
df=data.frame(country=c("US", "GB", "BR"),
val1=c(10,13,14),
val2=c(23,12,32))
Line <- gvisLineChart(df)
plot(Line)
Line
Bar <- gvisBarChart(df)
plot(Bar)
print(Bar, file="~/Desktop/AndrewGeoMap.js")
print(Bar, "char",file="~/Desktop/AndrewGeoMap.js")
print(Bar, "chart", file="~/Desktop/AndrewGeoMap.js")
source('~/.active-rstudio-document')
demo(googleVis)
require(datasets)
states
View(state.x77)
View(state.name)
state.name
library(ggmap) library(mapproj)
原文網址：https://read01.com/7Rdan.html
install.packages(ggmap)
install.packages('ggmap;)
install.packages('ggmap;)
;d
ssdsd(0)
install.packages('ggmap')
library(ggmpa)
library(ggmpap)
library(ggmap)
map <- get_map(location = 'Taiwan', zoom = 4)
ggmap(map)
library(mapproj)
ggmap(map)
install.packages('ggptoto')
install.packages('ggproto')
install.packages('ggmap')
install.packages("ggmap")
ggmap(map)
library(mapproj)
library(ggmap)
map <- get_map(location = 'Taiwan', zoom = 4)
ggmap(map)
map <- get_map(location = 'China', zoom = 4)
ggmap(map)
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
library(readr)
train_flow <- read_csv("~/D3/pecuD3_final/train_flow.csv")
View(train_flow)
library(dplyr)
train_simple <- subset(train,year==2005)
train_simple <- subset(train_flow,year==2005)
library(ggmap)
map <- get_map(location = "Taiwan", zoom = 8, language = "zh-TW", maptype = "roadmap")
ggmap(map, darken = c(0.5, "white")) +geom_point(aes(x = long, y = lat),
color = "red", data = train_simple)
is.na(train_simple)
sum(is.na(train_flow))
sum(is.nan(train_flow))
sum(is.na(train_flow))
ggmap(map)
+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)
+stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")
+scale_fill_gradient(low = "green", high = "red",guide = FALSE)+scale_alpha(range = c(0, 0.3), guide = FALSE)
ggmap(map)
+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)
+stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")
+scale_fill_gradient(low = "green", high = "red",guide = FALSE)+scale_alpha(range = c(0, 0.3), guide = FALSE)
ggmap(map)
+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)
+stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")
+scale_fill_gradient(low = "green", high = "red",guide = FALSE)+scale_alpha(range = c(0, 0.3), guide = 'legend')
ggmap(map)
+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)
+stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")
+scale_fill_gradient(low = "green", high = "red",guide = 'legend')+scale_alpha(range = c(0, 0.3), guide = F)
ggmap(map)
+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)
+stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")
+scale_fill_gradient(low = "#132B43", high = "#56B1F7", space = "Lab", na.value = "grey50",
guide = "legend")+scale_alpha(range = c(0, 0.3), guide = F)
ggmap(map)
+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)
+stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")
+scale_fill_gradient(,data=train_simple,low = "#132B43", high = "#56B1F7", space = "Lab", na.value = "grey50",
guide = "legend")+scale_alpha(range = c(0, 0.3), guide = F)
ggmap(map)
+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)
+stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")
+scale_fill_gradient(data=train_simple,low = "#132B43", high = "#56B1F7", space = "Lab", na.value = "grey50",
guide = "legend")+scale_alpha(range = c(0, 0.3), guide = F)
ggmap(map)
+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)
+stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..))
ggmap(map) +
geom_point(aes(x = lon, y = lat), size = 2, col="red",data = train_simple, alpha = 0.6) +
geom_density2d(data = train_simple, aes(x = lon, y=lat), size = 0.3)
ggmap(map) +
geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 0.6) +
geom_density2d(data = train_simple, aes(x = long, y=lat), size = 0.3)
ggmap(map)
+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)+
stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")+
scale_fill_gradient(low = "green", high = "red",guide = 'legend')+
scale_alpha(range = c(0, 0.3), guide = F)
ggmap(map)+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_simple, alpha = 1)+
stat_density2d(data = train_simple, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")+
scale_fill_gradient(low = "green", high = "red",guide = 'legend')+
scale_alpha(range = c(0, 0.3), guide = F)
train_simple <- subset(train_flow, year==2014)
View(train_simple)
train_simple %>% group_by(stop_name) %>% mutate(yearFLow = sum(flow))
train_simple %>% group(stop_name) %>% mutate(yearFLow = sum(flow))
train_simple %>% group_by(stop_name) %>% mutate(yearFLow = sum(flow)) %>% ungroup()
train_use <- train[,c('stop_name','yearFlow','lat','long')]
train_use <- train_simple[,c('stop_name','yearFlow','lat','long')]
train_use <- train_simple %>% group_by(stop_name) %>% mutate(yearFLow = sum(flow)) %>% ungroup()[,c('stop_name','yearFlow','lat','long')]
train_use <- train_simple %>% group_by(stop_name) %>% mutate(yearFLow = sum(flow)) %>% ungroup()
train_use <- train_use[,c('stop_name','yearFlow','lat','long')]
View(train_use)
train_use <- train_use[,c('stop_name','yearFLow','lat','long')]
colnames(train_use)[2] = 'yearFlow'
train_use <- unique(train_use)
train_use <- train_use %>% arrange(desc(yearFlow))
View(train_use)
ggmap(map)+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_use, alpha = 1)+
stat_density2d(data = train_use, aes(x = long, y=lat,fill = ..level.., alpha = ..level..)
,size = 0.01, bins = 16, geom = "polygon")+
scale_fill_gradient(low = "green", high = "red",guide = 'legend')+
scale_alpha(range = c(0, 0.3), guide = F)
ggmap(map)+geom_point(aes(x = long, y = lat), size = 2, col="red",data = train_use, alpha = 1)
write.csv(train_use,'2014_train_year_flow.csv',row.names = F)
View(train_simple)
View(train_use)
shiny::runApp('D3/pecuD3_final/pecuD3_shiny_final')
runApp('D3/pecuD3_final/pecuD3_shiny_final')
shiny::runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
install.packages('extrafont')
library(extrafont)
runApp('pecuR/shinyProject')
fonts()
fonttable()
library(extrafont)
fonttable()
fonttable()
fonts()
font_import()
font_import()
fonts()
fonttable()
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
shiny::runApp('dsR/dsr_zhihu/shiny_dsr_zhihu')
shiny::runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
shiny::runApp('pecuR/shinyProject')
runApp('pecuR/shinyProject')
shiny::runApp('dsR/dsr_zhihu/shiny_dsr_zhihu')
shiny::runApp('pecuR/shinyProject_personal')
print(a)
source('~/Desktop/test.R')
library(readr)
res <- read_csv("~/ML2017/hw2/res.csv")
View(res)
library(readr)
res_prev <- read_csv("~/Desktop/res_prev.csv")
View(res_prev)
res$label
res_prev$label
res$label == res_prev$label
sum(res$label == res_prev$label)
library(readr)
prediction <- read_csv("~/Desktop/0.54786/prediction.csv")
View(prediction)
library(readr)
prediction_check <- read_csv("~/Desktop/0.54786/prediction_check.csv")
View(prediction_check)
c(1,2,3,4,5)==c(1,2,3,4,5)
c(1,2,3,4,'5 2')==c(1,2,3,4,'5 2')
c(1,2,3,4,'5 2')==c(1,2,3,4,'5 1')
prediction_check$tags == prediction$tags
sum(prediction_check$tags == prediction$tags) - nrow(prediction)
sum(prediction_check$tags == prediction$tags)
prediction_check$tags == prediction$tags
?rmna
?na.omit
na.omit(prediction_check$tags == prediction$tags)
!(na.omit(prediction_check$tags == prediction$tags))
sum(!(na.omit(prediction_check$tags == prediction$tags)))
setwd("~/MSTAT/MSTAT_FINAL")
setwd("~/MSTAT/MSTAT_FINAL")
source('~/Desktop/serbank/preprocessing.R')
setwd("~/MSTAT/MSTAT_FINAL")
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/.active-rstudio-document')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
View(year_data)
?write.csv
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
View(year_data)
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
View(data)
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
View(pre_year_data)
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
View(data)
summary(data)
source('~/MSTAT/MSTAT_FINAL/test.R')
dummy.code(data$Pos1)
model.matrix(data$Pos1)
data
data$Pos1
model.matrix(data$Pos1)
model.matrix(~ Pos1, data = data)
model.matrix(~ Pos1 - 1, data = data)
View(model.matrix(~ Pos1 - 1, data = data))
pos_dummy = model.matrix(~ Pos1 - 1, data = data)
View(pos_dummy)
names(pos_dummy)
pos_dummy = as.data.frame(model.matrix(~ Pos1 - 1, data = data))
names(pos_dummy)
sapply(names(pos_dummy), function(x) substr(x,1,2))
sapply(names(pos_dummy), function(x) substr(x,5,2))
sapply(names(pos_dummy), function(x) substr(x,4,2))
sapply(names(pos_dummy), function(x) substr(x,1,4))
sapply(names(pos_dummy), function(x) substr(x,2,4))
sapply(names(pos_dummy), function(x) substr(x,3,4))
sapply(names(pos_dummy), function(x) substr(x,4,6))
sapply(names(pos_dummy), function(x) substr(x,5,6))
pos_dummy = as.data.frame(model.matrix(~ Pos1 - 1, data = data))
names(pos_dummy) = sapply(names(pos_dummy), function(x) substr(x,5,6))
rowSums(pos_dummy)
cbind(data, pos_dummy)
View(cbind(data, pos_dummy))
source('~/MSTAT/MSTAT_FINAL/test.R')
View(datas)
View(dummy_pos)
View(pos_dummy)
?sep
?seq
source('~/MSTAT/MSTAT_FINAL/test.R')
cbind(data, pos_dummy)
seq(start=7,to=10)
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
>lm
?lm
ncol(data)
?as.formula
f <- as.formula(paste('Salary_to_predict ~', paste(colnames(data)[1:27], collapse='+')))
paste(colnames(data)[1:27], collapse='+')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
paste(colnames(data)[1:27], collapse='+')
paste('Salary_to_predict ~', paste(colnames(data)[1:27], collapse='+'))
source('~/MSTAT/MSTAT_FINAL/test.R')
f
lm(f, data)
source('~/MSTAT/MSTAT_FINAL/test.R')
model <- lm(f, data)
data
head(data)
f
model <- lm(Salary_to_predict ~ pos_1B+pos_2B+pos_3B+pos_C+pos_CF+pos_DH+pos_LF+pos_P+pos_RF+pos_SS+G+AB+R+H+2B+3B+HR+RBI+BB+SO+SB+CS+AVG+OBP+SLG+OPS+Salary, data)
model <- lm(Salary_to_predict ~ Salary, data)
model <- lm(Salary_to_predict ~ OPS+Salary, data)
model <- lm(Salary_to_predict ~ pos_1B+Salary, data)
model <- lm(Salary_to_predict ~ G+Salary, data)
model <- lm(Salary_to_predict ~ G+AB+R+H+2B+3B+HR+Salary, data)
model <- lm(Salary_to_predict ~ G+AB+R+H+2B+3B+Salary, data)
model <- lm(Salary_to_predict ~ G+AB+R+H+2B+Salary, data)
model <- lm(Salary_to_predict ~ G+AB+H+2B+Salary, data)
model <- lm(Salary_to_predict ~ G+AB+2B+Salary, data)
model <- lm(Salary_to_predict ~ AB+2B+Salary, data)
model <- lm(Salary_to_predict ~ ABSalary, data)
model <- lm(Salary_to_predict ~ AB+Salary, data)
model <- lm(Salary_to_predict ~ 2B+Salary, data)
model <- lm(Salary_to_predict ~ 1B+Salary, data)
data$2`2B`
data$2B
data$`2B`
names(data)
gsub(names(data),'1','one')
k = gsub(names(data),'1','one')
k
k = gsub('1','one',names(data))
k
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
library(readr)
library(dplyr)
# load data
pre_year = 2015
year = 2016
pre_year_path = paste0('./merge_data/merge_data_', pre_year, '.csv')
year_path = paste0('./merge_data/merge_data_', year, '.csv')
pre_year_data = read_csv(pre_year_path)
year_data = read_csv(year_path)
year_data <- year_data %>%
select(Player_Full_Name,Team,Salary)
names(year_data)[ncol(year_data)] = 'Salary_to_predict'
# merge year and pre_year data
data <- merge(x = pre_year_data, y = year_data, by = c('Player_Full_Name', 'Team')) %>%
arrange(desc(Salary_to_predict))
# replace NA by -1
data[is.na(data)] <- -1
View(data)
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
f
model <- lm(f, data)
model
summary(model)
predict(fit)
predict(model)
source('~/MSTAT/MSTAT_FINAL/test.R')
y_true
y_pred
y_true - y_pred
y_true[1]
y_true[2]
y_pred[1]
y_pred[2]
source('~/MSTAT/MSTAT_FINAL/test.R')
View(evaluate)
(data$Salary_to_predict - data$Salary) ** 2
data$Salary_to_predict - data$Salary
(evaluate$y_true - evaluate$y_pred) ** 2
(evaluate$y_true - evaluate$y_pred)
mean(evaluate$y_true - evaluate$y_pred)
mean((evaluate$y_true - evaluate$y_pred) ** 2)
mean((evaluate$y_true - evaluate$y_pred) ** 2) ** 0.5
1751244 * 1751244
source('~/MSTAT/MSTAT_FINAL/test.R')
mean(data$Salary)
rmse/mean(data$Salary)
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
34759852.6 - 34571428
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
# load data
pre_year = 2013
year = 2014
pre_year_path = paste0('./merge_data/merge_data_', pre_year, '.csv')
year_path = paste0('./merge_data/merge_data_', year, '.csv')
pre_year_data = read_csv(pre_year_path)
year_data = read_csv(year_path)
year_data <- year_data %>%
select(Player_Full_Name,Team,Salary)
names(year_data)[ncol(year_data)] = 'Salary_to_predict'
# merge year and pre_year data
data <- merge(x = pre_year_data, y = year_data, by = c('Player_Full_Name', 'Team')) %>%
arrange(desc(Salary_to_predict))
# replace NA by -1
data[is.na(data)] <- -1
View(data)
pos_dummy = as.data.frame(model.matrix(~ PosOne - 1, data = data))
View(pos_dummy)
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
source('~/MSTAT/MSTAT_FINAL/test.R')
