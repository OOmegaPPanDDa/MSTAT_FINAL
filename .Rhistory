prediction_check$tags == prediction$tags
?rmna
?na.omit
na.omit(prediction_check$tags == prediction$tags)
!(na.omit(prediction_check$tags == prediction$tags))
sum(!(na.omit(prediction_check$tags == prediction$tags)))
setwd("~/MSTAT/MSTAT_FINAL")
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
setwd("~/MSTAT/MSTAT_FINAL")
source('~/MSTAT/MSTAT_FINAL/merge.R')
paste('h_', names(hitting_data), sep='')
names(hitting_data)
library(readr)
library(dplyr)
pos_transfer <- function(x){
if(grepl('PITCHERS',x) || grepl('STARTING PITCHER',x) || grepl('RELIEF PITCHER',x) || grepl('CLOSER',x)){
return('P')
}
if(grepl('CATCHER', x)){
return('C')
}
if(grepl('1ST BASE', x)){
return('1B')
}
if(grepl('2ND BASE', x)){
return('2B')
}
if(grepl('3RD BASE', x)){
return('3B')
}
if(grepl('3RD BASE', x)){
return('3B')
}
if(grepl('LEFT FIELD', x)){
return('LF')
}
if(grepl('RIGHT FIELD', x)){
return('RF')
}
if(grepl('CENTER FIELD', x)){
return('CF')
}
if(grepl('SHORTSTOP', x)){
return('SS')
}
if(grepl('DESIGNATED HITTER', x)){
return('DH')
}
if(grepl('OUTFIELDERS', x)){
return(NA)
}
cat('out_of_pos_transfer: ', x, '\n')
return(NA)
}
# load data
year = 2013
salary_path = paste0('./salary_data/salary_', year, '_valid.csv')
hitting_path = paste0('./hitting_data/data_', year, '_hitting_valid.csv')
fielding_path = paste0('./fielding_data/data_', year, '_fielding_valid.csv')
pitching_path = paste0('./pitching_data/data_', year, '_pitching_valid.csv')
salary_data = read_csv(salary_path)
hitting_data = read_csv(hitting_path)
fielding_data = read_csv(fielding_path)
pitching_data = read_csv(pitching_path)
# handle salary_data
position = salary_data[seq(from = 2, to = nrow(salary_data), by = 2),][2]
names(position) = c('POSITION')
salary_data = salary_data[seq(from = 1, to = nrow(salary_data), by = 2),]
salary_data = cbind(salary_data, position)
salary_data$SALARY = gsub('\xa0','',(salary_data$SALARY))
salary_data$SALARY = gsub("\\$",'',(salary_data$SALARY))
salary_data$SALARY = gsub(',','',(salary_data$SALARY))
salary_data$SALARY = as.numeric(salary_data$SALARY)
salary_data$Player = sapply(salary_data$PLAYER, function(x) paste0(tail(strsplit(x,' ')[[1]],1),', ', substr(x,1,1)))
salary_data$Player = sapply(salary_data$Player, function(x) paste0(toupper(substr(x, 1, 1)), substr(x, 2, nchar(x))))
salary_data$Pos = sapply(salary_data$POSITION, function(x) pos_transfer(x))
names(salary_data) = c('Team', 'Player_Full_Name', 'Salary', 'Pos1_Detailed', 'Player', 'Pos1')
salary_data = salary_data[,c('Player', 'Player_Full_Name', 'Team', 'Pos1', 'Pos1_Detailed', 'Salary')]
salary_data <- salary_data %>%
arrange(Player) %>%
arrange(desc(Salary))
# handle mlb data
mlb_key_col = c('Player','Team')
hitting_data <- hitting_data[,-which(names(hitting_data) %in% c('RK'))]
fielding_data <- fielding_data[,-which(names(fielding_data) %in% c('RK'))]
pitching_data <- pitching_data[,-which(names(pitching_data) %in% c('RK'))]
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/blending_test.R')
source('~/MSTAT/MSTAT_FINAL/blending_test.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/merge.R')
source('~/MSTAT/MSTAT_FINAL/blending_test.R')
source('~/MSTAT/MSTAT_FINAL/blending_test.R')
library(readr)
library(dplyr)
library(randomForest)
library(e1071)
library(ggplot2)
library(xgboost)
options(scipen=999)
set.seed(4646)
# position: P for Pitcher, C for Catcher, F for Fielder
pos_assigned = 'F'
rank_stage = 20
test_size = 0.2
blend_thresh = 0
year_considered = c(2012,2013,2014,2015,2016)
year_data_list = list()
year_data_list_index = 1
for (the_year in year_considered){
# load data
pre_year = the_year - 1
year = the_year
pre_year_path = paste0('./merge_data/merge_data_', pre_year, '.csv')
year_path = paste0('./merge_data/merge_data_', year, '.csv')
pre_year_data = read_csv(pre_year_path)
year_data = read_csv(year_path)
year_data <- year_data %>%
select(Player_Full_Name,Team,Salary)
names(year_data)[ncol(year_data)] = 'Salary_to_predict'
# merge year and pre_year data
# merge by Player_Full_Name
the_data <- merge(x = pre_year_data, y = year_data, by = c('Player_Full_Name')) %>%
arrange(desc(Salary_to_predict))
the_data <- the_data[,-which(names(the_data) %in% c('Team.y'))]
names(the_data)[3] = 'Team'
# remove duplicated
name_duplicated_data = the_data$Player_Full_Name[duplicated(the_data$Player_Full_Name)]
# print(name_duplicated_data)
the_data <- the_data %>%
filter(!(Player_Full_Name %in% name_duplicated_data))
year_record = rep(the_year, nrow(the_data))
the_data = cbind(year_record, the_data)
the_data <- the_data %>%
mutate(Salary_rank = floor((rank(the_data$Salary, ties.method = 'last')/nrow(the_data))*rank_stage- 0.00001) + 1) %>%
mutate(Salary_to_predict_rank = floor((rank(the_data$Salary_to_predict, ties.method = 'last')/nrow(the_data))*rank_stage- 0.00001) + 1)
# scale data
the_data[seq(from=8,to=ncol(the_data)-4)] = scale(the_data[seq(from=8,to=ncol(the_data)-4)])
year_data_list[[year_data_list_index]] = the_data
year_data_list_index = year_data_list_index + 1
}
bdata = do.call("rbind", year_data_list)
# replace NA by -1
bdata[is.na(bdata)] <- -1
bdata <- bdata %>%
mutate(Trend = Salary_to_predict_rank - Salary_rank)
bdata$Trend[bdata$Trend > 0] = 'improved'
bdata$Trend[bdata$Trend <= 0] = 'unimproved'
# position dummy coding
pos_dummy = as.data.frame(model.matrix(~ Pos2 - 1, data = bdata))
names(pos_dummy) = sapply(names(pos_dummy), function(x) paste0('pos_',substr(x,5,6)))
bdata = cbind(cbind(bdata[,c(1,2,3,4,5,6,7)], pos_dummy), bdata[,seq(from = 8, to = ncol(bdata))])
cat('Data Count', nrow(bdata), '\n')
ncol(bdata)
View(bdata)
source('~/MSTAT/MSTAT_FINAL/blending_test.R')
source('~/MSTAT/MSTAT_FINAL/blending_test.R')
library(readr)
library(dplyr)
library(randomForest)
library(e1071)
library(ggplot2)
library(xgboost)
options(scipen=999)
set.seed(4646)
# position: P for Pitcher, C for Catcher, F for Fielder
pos_assigned = 'F'
rank_stage = 20
test_size = 0.2
blend_thresh = 0
year_considered = c(2012,2013,2014,2015,2016)
year_data_list = list()
year_data_list_index = 1
for (the_year in year_considered){
# load data
pre_year = the_year - 1
year = the_year
pre_year_path = paste0('./merge_data/merge_data_', pre_year, '.csv')
year_path = paste0('./merge_data/merge_data_', year, '.csv')
pre_year_data = read_csv(pre_year_path)
year_data = read_csv(year_path)
year_data <- year_data %>%
select(Player_Full_Name,Team,Salary)
names(year_data)[ncol(year_data)] = 'Salary_to_predict'
# merge year and pre_year data
# merge by Player_Full_Name
the_data <- merge(x = pre_year_data, y = year_data, by = c('Player_Full_Name')) %>%
arrange(desc(Salary_to_predict))
the_data <- the_data[,-which(names(the_data) %in% c('Team.y'))]
names(the_data)[3] = 'Team'
# remove duplicated
name_duplicated_data = the_data$Player_Full_Name[duplicated(the_data$Player_Full_Name)]
# print(name_duplicated_data)
the_data <- the_data %>%
filter(!(Player_Full_Name %in% name_duplicated_data))
year_record = rep(the_year, nrow(the_data))
the_data = cbind(year_record, the_data)
the_data <- the_data %>%
mutate(Salary_rank = floor((rank(the_data$Salary, ties.method = 'last')/nrow(the_data))*rank_stage- 0.00001) + 1) %>%
mutate(Salary_to_predict_rank = floor((rank(the_data$Salary_to_predict, ties.method = 'last')/nrow(the_data))*rank_stage- 0.00001) + 1)
# scale data
the_data[seq(from=8,to=ncol(the_data)-4)] = scale(the_data[seq(from=8,to=ncol(the_data)-4)])
year_data_list[[year_data_list_index]] = the_data
year_data_list_index = year_data_list_index + 1
}
bdata = do.call("rbind", year_data_list)
View(bdata)
print(names(bdata))
source('~/MSTAT/MSTAT_FINAL/Picture.R')
ggplot(data = result_f, aes(x = years, y = factors)) +
geom_tile(aes(fill = result_f$performance)) +
scale_fill_manual(breaks=result_f$performance, values=colors, guide=FALSE) +
ggtitle("Fielder") +
theme(plot.title = element_text(hjust = 0.5))
source('~/MSTAT/MSTAT_FINAL/blending_test.R')
ggplot(data = result_f, aes(x = years, y = factors)) +
geom_tile(aes(fill = performance)) +
scale_fill_manual(breaks=result_f$performance, values=colors, guide=FALSE) +
ggtitle("Fielder") +
theme(plot.title = element_text(hjust = 0.5))
library(readr)
library(dplyr)
library(ggplot2)
merge_data_2011 <- read_csv("./merge_data/merge_data_2011.csv")
merge_data_2012 <- read_csv("./merge_data/merge_data_2012.csv")
merge_data_2013 <- read_csv("./merge_data/merge_data_2013.csv")
merge_data_2014 <- read_csv("./merge_data/merge_data_2014.csv")
merge_data_2015 <- read_csv("./merge_data/merge_data_2015.csv")
merge_data_2016 <- read_csv("./merge_data/merge_data_2016.csv")
data_2011 = merge_data_2011
data_2011[is.na(data_2011)] = 0
data_2012 = merge_data_2012
data_2012[is.na(data_2012)] = 0
data_2013 = merge_data_2013
data_2013[is.na(data_2013)] = 0
data_2014 = merge_data_2014
data_2014[is.na(data_2014)] = 0
data_2015 = merge_data_2015
data_2015[is.na(data_2015)] = 0
data_2016 = merge_data_2016
data_2016[is.na(data_2016)] = 0
names(data_2016)[ncol(data_2016)] = 'Salary_to_predict'
data_2016 <- data_2016 %>%
select(Player_Full_Name,Team,Salary_to_predict)
complete_2015 <- merge(x = data_2015, y = data_2016, by = c('Player_Full_Name')) %>%
arrange(desc(Salary_to_predict))
names(data_2015)[ncol(data_2015)] = 'Salary_to_predict'
data_2015 <- data_2015 %>%
select(Player_Full_Name,Team,Salary_to_predict)
complete_2014 <- merge(x = data_2014, y = data_2015, by = c('Player_Full_Name')) %>%
arrange(desc(Salary_to_predict))
names(data_2014)[ncol(data_2014)] = 'Salary_to_predict'
data_2014 <- data_2014 %>%
select(Player_Full_Name,Team,Salary_to_predict)
complete_2013 <- merge(x = data_2013, y = data_2014, by = c('Player_Full_Name')) %>%
arrange(desc(Salary_to_predict))
names(data_2013)[ncol(data_2013)] = 'Salary_to_predict'
data_2013 <- data_2013 %>%
select(Player_Full_Name,Team,Salary_to_predict)
complete_2012 <- merge(x = data_2012, y = data_2013, by = c('Player_Full_Name')) %>%
arrange(desc(Salary_to_predict))
names(data_2012)[ncol(data_2012)] = 'Salary_to_predict'
data_2012 <- data_2012 %>%
select(Player_Full_Name,Team,Salary_to_predict)
complete_2011 <- merge(x = data_2011, y = data_2012, by = c('Player_Full_Name')) %>%
arrange(desc(Salary_to_predict))
complete_p_2011 = complete_2011[which(complete_2011$Pos2 == 'P'),]
complete_p_2012 = complete_2012[which(complete_2012$Pos2 == 'P'),]
complete_p_2013 = complete_2013[which(complete_2013$Pos2 == 'P'),]
complete_p_2014 = complete_2014[which(complete_2014$Pos2 == 'P'),]
complete_p_2015 = complete_2015[which(complete_2015$Pos2 == 'P'),]
complete_c_2011 = complete_2011[which(complete_2011$Pos2 == 'C'),]
complete_c_2012 = complete_2012[which(complete_2012$Pos2 == 'C'),]
complete_c_2013 = complete_2013[which(complete_2013$Pos2 == 'C'),]
complete_c_2014 = complete_2014[which(complete_2014$Pos2 == 'C'),]
complete_c_2015 = complete_2015[which(complete_2015$Pos2 == 'C'),]
complete_f_2011 = complete_2011[which(complete_2011$Pos2 != 'P'),]
complete_f_2012 = complete_2012[which(complete_2012$Pos2 != 'P'),]
complete_f_2013 = complete_2013[which(complete_2013$Pos2 != 'P'),]
complete_f_2014 = complete_2014[which(complete_2014$Pos2 != 'P'),]
complete_f_2015 = complete_2015[which(complete_2015$Pos2 != 'P'),]
complete_cor_p_2011 = cor(complete_p_2011[,c(35:42, 48:92, 94)])
complete_cor_p_2012 = cor(complete_p_2012[,c(35:42, 48:92, 94)])
complete_cor_p_2013 = cor(complete_p_2013[,c(35:42, 48:92, 94)])
complete_cor_p_2014 = cor(complete_p_2014[,c(35:42, 48:92, 94)])
complete_cor_p_2015 = cor(complete_p_2015[,c(35:42, 48:92, 94)])
complete_cor_c_2011 = cor(complete_c_2011[,c(7:49, 92, 94)])
complete_cor_c_2012 = cor(complete_c_2012[,c(7:49, 92, 94)])
complete_cor_c_2013 = cor(complete_c_2013[,c(7:49, 92, 94)])
complete_cor_c_2014 = cor(complete_c_2014[,c(7:49, 92, 94)])
complete_cor_c_2015 = cor(complete_c_2015[,c(7:49, 92, 94)])
complete_cor_f_2011 = cor(complete_f_2011[,c(7:42, 48:49, 92, 94)])
complete_cor_f_2012 = cor(complete_f_2012[,c(7:42, 48:49, 92, 94)])
complete_cor_f_2013 = cor(complete_f_2013[,c(7:42, 48:49, 92, 94)])
complete_cor_f_2014 = cor(complete_f_2014[,c(7:42, 48:49, 92, 94)])
complete_cor_f_2015 = cor(complete_f_2015[,c(7:42, 48:49, 92, 94)])
complete_cor_p = c()
complete_cor_p = rbind(complete_cor_p, complete_cor_p_2011[nrow(complete_cor_p_2011),])
complete_cor_p = rbind(complete_cor_p, complete_cor_p_2012[nrow(complete_cor_p_2012),])
complete_cor_p = rbind(complete_cor_p, complete_cor_p_2013[nrow(complete_cor_p_2013),])
complete_cor_p = rbind(complete_cor_p, complete_cor_p_2014[nrow(complete_cor_p_2014),])
complete_cor_p = rbind(complete_cor_p, complete_cor_p_2015[nrow(complete_cor_p_2015),])
complete_cor_p = complete_cor_p[,1:ncol(complete_cor_p)-1]
complete_cor_c = c()
complete_cor_c = rbind(complete_cor_c, complete_cor_c_2011[nrow(complete_cor_c_2011),])
complete_cor_c = rbind(complete_cor_c, complete_cor_c_2012[nrow(complete_cor_c_2012),])
complete_cor_c = rbind(complete_cor_c, complete_cor_c_2013[nrow(complete_cor_c_2013),])
complete_cor_c = rbind(complete_cor_c, complete_cor_c_2014[nrow(complete_cor_c_2014),])
complete_cor_c = rbind(complete_cor_c, complete_cor_c_2015[nrow(complete_cor_c_2015),])
complete_cor_c = complete_cor_c[,1:ncol(complete_cor_c)-1]
complete_cor_f = c()
complete_cor_f = rbind(complete_cor_f, complete_cor_f_2011[nrow(complete_cor_f_2011),])
complete_cor_f = rbind(complete_cor_f, complete_cor_f_2012[nrow(complete_cor_f_2012),])
complete_cor_f = rbind(complete_cor_f, complete_cor_f_2013[nrow(complete_cor_f_2013),])
complete_cor_f = rbind(complete_cor_f, complete_cor_f_2014[nrow(complete_cor_f_2014),])
complete_cor_f = rbind(complete_cor_f, complete_cor_f_2015[nrow(complete_cor_f_2015),])
complete_cor_f = complete_cor_f[,1:ncol(complete_cor_f)-1]
complete_cor_p = abs(complete_cor_p)
complete_cor_c = abs(complete_cor_c)
complete_cor_f = abs(complete_cor_f)
rownames(complete_cor_p) = c(2011, 2012, 2013, 2014, 2015)
rownames(complete_cor_c) = c(2011, 2012, 2013, 2014, 2015)
rownames(complete_cor_f) = c(2011, 2012, 2013, 2014, 2015)
result_p <- expand.grid(years = c(rownames(complete_cor_p)), factors = c(colnames(complete_cor_p)))
result_c <- expand.grid(years = c(rownames(complete_cor_c)), factors = c(colnames(complete_cor_c)))
result_f <- expand.grid(years = c(rownames(complete_cor_f)), factors = c(colnames(complete_cor_f)))
set.seed(41)
result_p$performance <- cut(as.vector(complete_cor_p), breaks = 40)
result_c$performance <- cut(as.vector(complete_cor_c), breaks = 40)
result_f$performance <- cut(as.vector(complete_cor_f), breaks = 40)
colors = colorRampPalette(c("white", "deepskyblue"))(40)
##### pitcher heatmap start #####
ggplot(data = result_p, aes(x = years, y = factors)) +
geom_tile(aes(fill = performance)) +
scale_fill_manual(breaks=result_p$performance, values=colors, guide=FALSE) +
ggtitle("Pitcher") +
theme(plot.title = element_text(hjust = 0.5))
###### pitcher heatmap end ######
##### catcher heatmap start #####
ggplot(data = result_c, aes(x = years, y = factors)) +
geom_tile(aes(fill = performance)) +
scale_fill_manual(breaks=result_c$performance, values=colors, guide=FALSE) +
ggtitle("Catcher") +
theme(plot.title = element_text(hjust = 0.5))
###### catcher heatmap end ######
##### fielder heatmap start #####
ggplot(data = result_f, aes(x = years, y = factors)) +
geom_tile(aes(fill = performance)) +
scale_fill_manual(breaks=result_f$performance, values=colors, guide=FALSE) +
ggtitle("Fielder") +
theme(plot.title = element_text(hjust = 0.5))
library(readr)
library(dplyr)
library(randomForest)
library(e1071)
library(ggplot2)
library(xgboost)
options(scipen=999)
set.seed(4646)
# position: P for Pitcher, C for Catcher, F for Fielder
pos_assigned = 'F'
rank_stage = 20
test_size = 0.2
blend_thresh = 0
year_considered = c(2012,2013,2014,2015,2016)
year_data_list = list()
year_data_list_index = 1
for (the_year in year_considered){
# load data
pre_year = the_year - 1
year = the_year
pre_year_path = paste0('./merge_data/merge_data_', pre_year, '.csv')
year_path = paste0('./merge_data/merge_data_', year, '.csv')
pre_year_data = read_csv(pre_year_path)
year_data = read_csv(year_path)
year_data <- year_data %>%
select(Player_Full_Name,Team,Salary)
names(year_data)[ncol(year_data)] = 'Salary_to_predict'
# merge year and pre_year data
# merge by Player_Full_Name
the_data <- merge(x = pre_year_data, y = year_data, by = c('Player_Full_Name')) %>%
arrange(desc(Salary_to_predict))
the_data <- the_data[,-which(names(the_data) %in% c('Team.y'))]
names(the_data)[3] = 'Team'
# remove duplicated
name_duplicated_data = the_data$Player_Full_Name[duplicated(the_data$Player_Full_Name)]
# print(name_duplicated_data)
the_data <- the_data %>%
filter(!(Player_Full_Name %in% name_duplicated_data))
year_record = rep(the_year, nrow(the_data))
the_data = cbind(year_record, the_data)
the_data <- the_data %>%
mutate(Salary_rank = floor((rank(the_data$Salary, ties.method = 'last')/nrow(the_data))*rank_stage- 0.00001) + 1) %>%
mutate(Salary_to_predict_rank = floor((rank(the_data$Salary_to_predict, ties.method = 'last')/nrow(the_data))*rank_stage- 0.00001) + 1)
# scale data
the_data[seq(from=8,to=ncol(the_data)-4)] = scale(the_data[seq(from=8,to=ncol(the_data)-4)])
year_data_list[[year_data_list_index]] = the_data
year_data_list_index = year_data_list_index + 1
}
bdata = do.call("rbind", year_data_list)
View(bdata)
print(names(bdata))
# replace NA by -1
bdata[is.na(bdata)] <- -1
bdata <- bdata %>%
mutate(Trend = Salary_to_predict_rank - Salary_rank)
bdata$Trend[bdata$Trend > 0] = 'improved'
bdata$Trend[bdata$Trend <= 0] = 'unimproved'
# position dummy coding
pos_dummy = as.data.frame(model.matrix(~ Pos2 - 1, data = bdata))
names(pos_dummy) = sapply(names(pos_dummy), function(x) paste0('pos_',substr(x,5,6)))
bdata = cbind(cbind(bdata[,c(1,2,3,4,5,6,7)], pos_dummy), bdata[,seq(from = 8, to = ncol(bdata))])
cat('Data Count', nrow(bdata), '\n')
###########################
########### Draw ##########
########## START ##########
###########################
bdata_rank_group <- bdata %>%
group_by(Salary_to_predict_rank) %>%
summarise(mean_Salary_to_predict = mean(Salary_to_predict))
bdata_rank_group$Salary_to_predict_rank <- as.factor(bdata_rank_group$Salary_to_predict_rank)
# View(bdata_rank_group)
rank_bar <- ggplot(bdata_rank_group, aes(x=Salary_to_predict_rank, y=mean_Salary_to_predict)) +
geom_bar(stat="identity", fill = 'deepskyblue') +
# geom_text(aes(label=mean_Salary_to_predict), vjust=-0.2) +
ggtitle("Salary Rank") +
theme(text = element_text(family= 'Arial Unicode MS'),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
)
print(rank_bar)
POSITION = c()
for (i in 1:nrow(bdata)){
if(bdata$pos_P[i] == 1){
the_pos = 'Pitcher'
}else if(bdata$pos_C[i] == 1){
the_pos = 'Catcher'
}else{
the_pos = 'Fielder'
}
POSITION = c(POSITION, the_pos)
}
bdata$POSITION = POSITION
type_boxplot <- ggplot(bdata, aes(POSITION, Salary_to_predict, color = POSITION)) +
geom_point() +
geom_boxplot()
print(type_boxplot)
bdata <- bdata[,-which(names(bdata) %in% c('POSITION'))]
###########################
########### Draw ##########
########### END ###########
###########################
# Data select
# Pitcher
# better with random seed 4646
# better with test size 0.1
if(pos_assigned == 'P'){
bdata = subset(bdata, pos_P == 1)
}
# Catcher
# better with random seed 4646
# better with test size 0.2
if(pos_assigned == 'C'){
bdata = subset(bdata, pos_C == 1)
}
# Fielder
# better with random seed 4646
# better with test size 0.1
if(pos_assigned == 'F'){
bdata = subset(bdata, pos_P == 0)
bdata = subset(bdata, pos_C == 0)
}
cat('Selected Data Count', nrow(bdata), '\n')
# Regression
regr_data = bdata[,seq(from=18,to=ncol(bdata)-3)]
chi_threshold = 10000
selected_cols = c()
for(i in 1:(ncol(regr_data)-1)){
if(length(unique(regr_data[,i]))>1){
chi = chisq.test(regr_data$Salary_to_predict,regr_data[,i], correct = FALSE)
print(names(regr_data)[i])
print(chi$statistic)
if(chi$statistic >= chi_threshold ){
selected_cols = c(selected_cols, i)
}
}
}
selected_cols = c(selected_cols, ncol(regr_data))
print(selected_cols)
regr_data = regr_data[selected_cols]
regr <- lm(Salary_to_predict ~ ., regr_data)
regr_pred = predict(regr)
regr_true = bdata$Salary_to_predict
regr_rmse = (mean((regr_pred - regr_true)**2))**0.5
cat('regr_rmse', regr_rmse, '\n')
regr_relative_mean_error = mean(abs((regr_pred - regr_true)/regr_true))
cat('regr_relative_mean_error', regr_relative_mean_error, '\n')
source('~/MSTAT/MSTAT_FINAL/blending_test.R')
source('~/MSTAT/MSTAT_FINAL/blending_test.R')
source('~/MSTAT/MSTAT_FINAL/blending_test.R')
source('~/MSTAT/MSTAT_FINAL/blending_test.R')
source('~/MSTAT/MSTAT_FINAL/blending_test.R')
